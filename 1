 # Surpress warnings:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

import piplite
await piplite.install(['pandas','matplotlib','scikit-learn','seaborn', 'numpy'])

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,PolynomialFeatures
from sklearn.linear_model import LinearRegression
%matplotlib inline

from pyodide.http import pyfetch

async def download(url, filename):
    response = await pyfetch(url)
    if response.status == 200:
        with open(filename, "wb") as f:
            f.write(await response.bytes())

file_name='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'

await download(file_name, "kc_house_data_NaN.csv")
file_name="kc_house_data_NaN.csv"

df = pd.read_csv(file_name)
df.head()

df.dtypes

df.describe()

df.drop(["id", "Unnamed: 0"], axis=1, inplace=True)
df.describe()

print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

mean=df['bedrooms'].mean()
df['bedrooms'].replace(np.nan,mean, inplace=True)

mean=df['bathrooms'].mean()
df['bathrooms'].replace(np.nan,mean, inplace=True)

print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

floor1 = df['floors'].value_counts().to_frame()

print(floor1)

sns.boxplot(x="waterfront", y="price", data=df)

sns.regplot(x="sqft_above", y="price", data=df)

df.corr()['price'].sort_values()

X = df[['long']]
Y = df['price']
lm = LinearRegression()
lm.fit(X,Y)
lm.score(X, Y)

X1 = df[['sqft_living']]
Y = df['price']
lm = LinearRegression()
lm.fit(X1,Y)
lm.score(X1, Y)

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]     

lm = LinearRegression()

X = df[features]

lm.fit(X, Y)
lm.score(X,Y)

Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]

pipeline = Pipeline(Input)
X = df[features]
pipeline.fit(X, Y)

pipeline.score(X,Y)

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
print("done")

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]    
X = df[features]
Y = df['price']

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)


print("number of test samples:", x_test.shape[0])
print("number of training samples:",x_train.shape[0])

from sklearn.linear_model import Ridge

RM=Ridge(alpha=0.1)
RM.fit(X,Y)
RM.score(X,Y)

pr=PolynomialFeatures(degree=2)

x_train_pr=pr.fit_transform(x_train[[features]])
x_test_pr=pr.transform(x_test[[features]])

RM1=Ridge(alpha=0.1)
RM1.fit(x_train_pr, y_train)

R2=RM1.score(x_test_pr, y_test)
